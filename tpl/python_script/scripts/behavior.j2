#! /usr/bin/python3


####################################################################
####################################################################
##
## AUTO-GENERATED Behavior SERVER
##
## you should not need to modify this file.
##
####################################################################


from typing import Tuple
import threading
import rospy
import actionlib
import hri_actions_msgs.msg

import {{ id }}.behavior_impl


class BehaviorControlActionServer:
    # create messages that are used to publish feedback/result
    _feedback = hri_actions_msgs.msg.BehaviorControlFeedback()
    _result = hri_actions_msgs.msg.BehaviorControlResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(
            "/behaviors" + self._action_name + "/control",
            hri_actions_msgs.msg.BehaviorControlAction,
            execute_cb=self.execute_cb,
            auto_start=False,
        )
        self._as.start()

        self.behavior = {{ id }}.behavior_impl.Behavior()

    def execute_cb(self, goal):

        if not self.behavior:
            self._as.set_aborted()
            return

        if goal.action == hri_actions_msgs.msg.BehaviorControlGoal.START:

            rospy.logdebug(
                "%s: Starting behavior" % self._action_name,
            )

            success, msg = self.behavior.start()

            if success:
                self._result.ok = True
                rospy.loginfo("%s: Behavior successfully started" % self._action_name)
                self._as.set_succeeded(self._result, text=msg)
            else:
                self._result.ok = False
                rospy.logwarn("%s: Behavior failed to start" % self._action_name)
                self._as.set_succeeded(self._result, text=msg)

        elif goal.action == hri_actions_msgs.msg.BehaviorControlGoal.STOP:

            rospy.logdebug(
                "%s: Stopping behavior" % self._action_name,
            )

            success, msg = self.behavior.stop()

            if success:
                self._result.ok = True
                rospy.loginfo("%s: Behavior successfully stopped" % self._action_name)
                self._as.set_succeeded(self._result, text=msg)
            else:
                self._result.ok = False
                rospy.logwarn("%s: Behavior failed to stop" % self._action_name)
                self._as.set_succeeded(self._result, text=msg)

        else:
            rospy.logerr(
                "%s: Unknown behavior control request: %s"
                % (self._action_name, goal.action),
            )
            self._as.set_aborted(
                text="Unknown behavior control request: %s" % goal.action
            )


if __name__ == "__main__":

    rospy.init_node("{{ id }}")

    server = BehaviorControlActionServer(rospy.get_name())
    rospy.spin()
