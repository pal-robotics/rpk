import '../lib/jquery.min.js'

class Ros {
  constructor(options) {
    this.host = options.host;
  }

  get(address, cb) {
    $.get(this.host + address)
      .done(function(data) {
        if (cb !== undefined) {
          cb(data);
        }
      })
      .fail(function(data) {
        console.log(data.status);
      });
  }

  subscriber(topic_list) {
    var topic_param = "";
    for (var topic in topic_list) {
      topic_param += "topic=" + topic + "&";
    }

    return new EventSource(this.host+"/topic/subscribe?" + topic_param.substring(0, topic_param.length - 1));
  }

  post(address, params, cb) {
    $.post(this.host + address, {
        'data': JSON.stringify(params)
      })
      .done(function(data) {
        if (cb !== undefined)
          cb(data);
      })
      .fail(function(data) {
        console.log(data.status);
      });
  }

  delete(address, params, cb) {
    $.ajax({
      url: this.host + address,
      type: 'DELETE',
      data: {
        'data': JSON.stringify(params)
      },
      success: function(data) {
        console.log(data);
      }
    });
  }
};

class Subscriber {
  constructor(options) {
    this.ros = options.ros;
    this.topic_list = options.topic_list;

    this.evtSource = this.ros.subscriber(this.topic_list);
    this.evtSource.onmessage = function(msg) {
      var message = JSON.parse(msg.data);
      this.topic_list[message.topic](message.message);
    }.bind(this);
  }
}

class Topic {
  constructor(options) {
    this.topic_name = options.name;
    this.topic_space = '/topic/';
    this.ros = options.ros;
  }

  getMsg(cb) {
    this.ros.get(this.topic_space + this.topic_name, function(msg) {
      if (this.topic_name == msg.topic_name) {
        cb(msg.msg);
      }
    }.bind(this));
  }

  publish(msg) {
    this.ros.post(this.topic_space + this.topic_name, msg);
  }
};

class Service {
  constructor(options) {
    this.service_name = options.name;
    this.service_space = '/service/';
    this.ros = options.ros;
  }

  call(params, cb) {
    this.ros.post(this.service_space + this.service_name,
      params,
      function(data) {
        if (cb !== undefined) cb(data.response);
      });
  }
};

class ActionClient {
  constructor(options) {
    this.action_name = options.name;
    this.action_space = '/action/';
    this.current_goal = -1;
    this.states = {
      PENDING: "PENDING",
      ACTIVE: "ACTIVE",
      PREEMPTED: "PREEMPTED",
      SUCCEEDED: "SUCCEEDED",
      ABORTED: "ABORTED",
      REJECTED: "REJECTED",
      PREEMPTING: "PREEMPTING",
      RECALLING: "RECALLING",
      RECALLED: "RECALLED",
      LOST: "LOST",
      NONE: "NONE"
    };
    this.ros = options.ros;
  }

  sendGoal(goal, cb) {
    this.ros.post(this.action_space + this.action_name,
      goal,
      function(msg) {
        this.current_goal = msg.response.goal_id;
        if (cb !== undefined) cb(msg.response);
      }.bind(this));
  }

  cancelCurrentGoal() {
    if (this.current_goal != -1) {
      this.ros.delete(this.action_space + this.action_name, {
        goal_id: this.current_goal
      });
    }
  }

  findGoal(cb) {
    this.ros.get(this.action_space + this.action_name,
      function(msg) {
        for (var id in msg) {
          if (msg.hasOwnProperty(id) && msg[id] == that.states.ACTIVE) {
            this.current_goal = id;
            break;
          }
        }
        if (cb !== undefined && that.current_goal != -1)
          cb();
      }.bind(this));
  }

  findGoalState(goal_id, cb) {
    this.ros.get(this.action_space + this.action_name,
      function(msg) {
        if (msg.hasOwnProperty(goal_id)) {
          cb(msg[goal_id]);
        } else {
          cb("NOT FOUND");
        }
      });
  }

  getGoalState(cb) {
    this.ros.get(this.action_space + this.action_name + "?goal_id=" + this.current_goal,
      function(msg) {
        if (cb !== undefined) cb(msg.status);
      });
  }

  trackCurrentGoal(cb) {
    if (this.current_goal == -1) { // Find if there is an active goal
      this.findGoal(function() {
        this.getGoalState(cb);
      }.bind(this))
    } else {
      this.getGoalState(cb);
    }
  }

  getCurrentFeedback(cb) {
    // Check state of the current goal
    if (this.current_goal != -1) { // Only if there is an active or tracked goal
      this.ros.get(this.action_space + this.action_name + "?goal_id=" + this.current_goal,
        function(msg) {
          cb(msg);
        });
    }
  }

  getGoalFeedback(goal_id, cb) {
    // Check state of the current goal
    if (this.current_goal != -1) { // Only if there is an active or tracked goal
      this.ros.get(this.action_space + this.action_name + "?goal_id=" + goal_id,
        function(msg) {
          cb(msg);
        });
    }
  }

  clearGoalTracking() {
    this.current_goal = -1;
  }

  cancelAllGoals() {
    this.ros.delete(this.action_space + this.action_name, {
      goal_id: ''
    });
  }

  cancelGoal(goal_id) {
    this.ros.delete(this.action_space + this.action_name, {
      goal_id: goal_id
    });
  }

};

class Param {
  constructor(options) {
    this.param_name = options.name;
    this.param_space = '/param/';
    this.ros = options.ros;
  }

  get(cb) {
    this.ros.get(this.param_space + this.param_name,
      function(data) {
        if (cb !== undefined) {
          cb(JSON.parse(data.value.value));
        }
      });
  }
  set(value, cb) {
    this.ros.post(this.param_space + this.param_name, value, cb);
  }
};

export {Ros, Subscriber, Topic, Service, ActionClient, Param}