import PalLib from 'pallib.js'
import * as RRLIB from 'rrlib.js'

class MyClass {
    constructor() {
        this.ros = new RRLIB.Ros({host: 'http://' + window.location.hostname});
        this.pal_lib = new PalLib();

        // you can get and set ROS parameters like that:
        this.language = new RRLIB.Param({ros: this.ros, name: 'language'});
        this.language.set('en_GB');

        // here, we create proxies for ROS topics
        this.user_input = new RRLIB.Topic({ros: this.ros, name: 'user_input'});
        this.intents = new RRLIB.Topic({ros: this.ros, name: 'intents'});

        // see pallib.js for example of ROS action clients.
    }

    init() {
        this.pal_lib.init();
    }

    sayHello() {
        // you can directly call robott capabilities from a webpage. For
        // instance for TTS:
        this.pal_lib.say('Hello, I\'m ARI! How are you?', 'en_GB');

        // however, if you do so, your application controller won't know about
        // it, and might try to access the TTS at the same time (resource
        // conflict!)
        //
        // You can use an *intent* instead, if you want your application
        // controller to manage the action execution (see below an example).
    }

    goToContentPage() {
        // to navigate to a different page, we can either directly load a
        // different page (in that case, the application controller is not
        // aware of the change):

        // parent.switchConfig('content_page');

        // ...or publish an intent, to be handled by the application controller.
        // The application controller is then in charge of changing the page
        // with eg the ROS action /web/go_to:

        this.intents.publish({
            intent: '__intent_present_content__',
            data: '{"object": "content_page"}',
            source: '__unknown_agent__',
            modality: '__modality_touchscreen__',
            priority: 100,
            confidence: 1.0
        });
    }
};

export default MyClass
