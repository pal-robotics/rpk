#! /usr/bin/python3

import rospy
import actionlib
import hri_actions_msgs.msg


class Behaviour:
    def __init__(self) -> None:

        rospy.loginfo("Initialising behaviour {{ name }}...")

        self.is_running = False

        # do here any initialisation steps you need

    def run(self) -> None:

        rate = rospy.Rate(1)  # 1Hz
        while self.is_running:

            rospy.loginfo("Behaviour {{ name }} is running!")
            rate.sleep()

    def start(self) -> bool:

        self.is_running = True
        self.run()

        # return True if the behaviour successfully started
        return True

    def stop(self) -> bool:

        # add here any additional steps to stop your behaviour
        self.is_running = False

        # return True once the behaviour is fully stopped.
        return True


####################################################################
####################################################################

## AUTO-GENERATED BEHAVIOUR SERVER
##
## you should not need to modify anything below this line.


class BehaviourControlActionServer:
    # create messages that are used to publish feedback/result
    _feedback = hri_actions_msgs.msg.BehaviourControlFeedback()
    _result = hri_actions_msgs.msg.BehaviourControlResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(
            self._action_name,
            hri_actions_msgs.msg.BehaviourControlAction,
            execute_cb=self.execute_cb,
            auto_start=False,
        )
        self._as.start()

        self.behaviour = Behaviour()

    def execute_cb(self, goal):

        if goal.action == hri_actions_msgs.msg.BehaviourControlGoal.START:

            rospy.logdebug(
                "%s: Starting behaviour" % self._action_name,
            )

            success = self.behaviour.start()

            if success:
                self._result.ok = True
                rospy.loginfo("%s: Behaviour successfully started" % self._action_name)
                self._as.set_succeeded(self._result)
            else:
                self._result.ok = False
                rospy.logwarning("%s: Behaviour failed to start" % self._action_name)
                self._as.set_succeeded(self._result)


if __name__ == "__main__":

    rospy.init_node("{{ name }}")

    server = BehaviourControlActionServer(rospy.get_name())
    rospy.spin()
