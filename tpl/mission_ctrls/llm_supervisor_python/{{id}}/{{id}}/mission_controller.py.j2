# Copyright (c) {{ year }} {{ author }}. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json

from rclpy.lifecycle import Node
from rclpy.lifecycle import State
from rclpy.lifecycle import TransitionCallbackReturn

from rclpy.action import ActionClient
from chatbot_msgs.srv import GetResponse
from greet_task_msgs.action import Greet
from hri_actions_msgs.msg import Intent

from {{ id }}.component_dependencies import get_component_dependencies


class MissionController(Node):

    def __init__(self) -> None:
        """Construct the node."""
        super().__init__('mission_{{ id }}')

        self.get_logger().info("Initialising...")
        self._intents_sub = None
        self._timer = None

        self._text_input_sub = None

        self._llm_service_client = None
        self._intent_sub = None

        self._greet_action_client = None

    def on_intent(self, msg):

        self.get_logger().info("Received an intent: %s" % msg.intent)

        data = json.loads(msg.data) if msg.data else {}  # noqa: F841
        source = msg.source  # noqa: F841
        modality = msg.modality  # noqa: F841
        confidence = msg.confidence  # noqa: F841
        priority_hint = msg.priority  # noqa: F841

        if msg.intent == Intent.START_ACTIVITY:
            pass

        elif msg.intent == Intent.GREET:
            self.get_logger().info(f"Greeting user <{source}>")
            goal = Greet.Goal()
            goal.person_id = source
            self._greet_action_future = self._greet_action_client.send_goal_async(
                                           goal,
                                           feedback_callback=self.on_feedback)

            self._greet_action_future.add_done_callback(self.on_greet_done)

        else:
            self.get_logger().warning("I don't know how to process intent "
                                      "<%s>!" % msg.intent)

    def on_feedback(self, msg):
        self.get_logger().info("Received feedback: %s" % msg.feedback)

    def on_greet_done(self, future):
        result = future.result().result
        if result.error_msg:
            self.get_logger().error(f"Failed to greet user: {result.error_msg}")
        else:
            self.get_logger().info("Successfully greeted user")

    def generate_intent_list(self):

        tasks = get_component_dependencies("{{ id }}", "task")

        intents = []

        for task in tasks:
            intents.append(
                    {"id": task["name"].upper(),
                     "description": task["description"],
                     "example": task["examples"][0]
                     }
                    )

    #########################################################################

    #################################
    #
    # Lifecycle transitions callbacks
    #
    #################################

    def on_configure(self, state: State) -> TransitionCallbackReturn:
        """Configure the node."""
        self._llm_service_client = self.create_client(GetResponse,
                                                      '/ollama_connector/get_response')
        while not self._llm_service_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('LLM skill not yet available, waiting again...')

        self._greeter_action_client = ActionClient(self, Greet, '/greet')
        while not self._greeter_action_client.wait_for_server(timeout_sec=1.0):
            self.get_logger().info('Greet task not yet available, waiting again...')

        self._intents_sub = self.create_subscription(
            Intent,
            '/intents',
            self.on_intent,
            10)

        self.get_logger().info("Listening to incoming intents on the %s topic" %
                               self._intents_sub.topic_name)

        self.get_logger().info('Node configured.')
        return TransitionCallbackReturn.SUCCESS

    def on_activate(self, state: State) -> TransitionCallbackReturn:
        """Activate the node."""
        timer_period = 0.1  # in sec
        self._timer = self.create_timer(timer_period, self.run)

        self.get_logger().info('Node activated and running.')
        return super().on_activate(state)

    def on_deactivate(self, state: State) -> TransitionCallbackReturn:
        """Stop the timer to stop calling the `run` function (main task of your application)."""
        self.get_logger().info("Stopping application")

        self.destroy_timer(self._timer)
        self.destroy_subscription(self._intents_sub)

        self.get_logger().info('Node de-activated.')
        return super().on_deactivate(state)

    def on_shutdown(self, state: State) -> TransitionCallbackReturn:
        """
        Shutdown the node, after a shutting-down transition is requested.

        :return: The state machine either invokes a transition to the
            "finalized" state or stays in the current state depending on the
            return value.
            TransitionCallbackReturn.SUCCESS transitions to "finalized".
            TransitionCallbackReturn.FAILURE remains in current state.
            TransitionCallbackReturn.ERROR or any uncaught exceptions to
            "errorprocessing"
        """
        self.destroy_timer(self._timer)
        self.destroy_subscription(self._intents_sub)

        self.get_logger().info('Shutting down node.')
        return TransitionCallbackReturn.SUCCESS

    def run(self) -> None:
        # This basic mission controller does nothing
        # in the background. It only reacts to incoming intents.
        #
        # You can add your own background tasks here.
        pass

