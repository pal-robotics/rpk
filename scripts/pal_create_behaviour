#! /usr/bin/python3

import argparse
from pathlib import Path
from jinja2 import Environment, select_autoescape, FileSystemLoader

import rospkg

PKG_PATH = Path(rospkg.RosPack().get_path("pal_create_behaviour"))
AVAILABLE_TEMPLATES = {
    "python": {"tpl_path": "python_script", "short_desc": "simple Python script"},
}


def interactive_create(id=None, template=None):

    while not id:
        id = input(
            "Name of your behaviour? (must be a vlid identifier without spaces. eg 'robot_receptionist')\n"
        )

    name = input(
        "Full name of your behaviour? (eg 'The Receptionist Robot', press Return to skip)\n"
    )
    if not name:
        name = id

    while not template:
        print("What kind of behaviour do you want to create?")
        for idx, tpl in enumerate(AVAILABLE_TEMPLATES.keys()):
            print("%s: %s" % (idx + 1, AVAILABLE_TEMPLATES[tpl]["short_desc"]))

        try:
            choice = int(input("Your choice? "))

            template = list(AVAILABLE_TEMPLATES.keys())[choice - 1]
        except:
            template = ""

    return id, name, template


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Generates behaviour skeletons for interactive ROS-based robots"
    )
    #     parser.add_argument(
    #         "-f",
    #         "--force",
    #         action="store_true",
    #         help="if set, force overwriting existing documentation",
    #     )
    #
    parser.add_argument(
        "-n",
        "--name",
        type=str,
        nargs="?",
        help="Short name of your behaviour. Must be a valid file name without spaces.",
    )

    parser.add_argument(
        "-t",
        "--template",
        choices=AVAILABLE_TEMPLATES.keys(),
        type=str,
        nargs="?",
        help="Template to use.",
    )

    parser.add_argument(
        "path",
        type=str,
        nargs="?",
        const=".",
        default=".",
        help="path of the directory where the skeleton will be generated (default: .)",
    )

    args = parser.parse_args()

    env = Environment(
        loader=FileSystemLoader(PKG_PATH / "tpl"),
        autoescape=select_autoescape(),
        trim_blocks=True,
    )

    id, name, tpl = interactive_create(args.name, args.template)

    data = {
        "id": id,
        "name": name,
    }

    root = Path(args.path) / id
    root.mkdir(parents=True, exist_ok=True)

    print("Generating behaviour skeleton in %s..." % root)

    if tpl == "python":

        py_tpls = {
            "main.py": env.get_template("python_script/main.py.j2"),
        }

        for filename, tpl in py_tpls.items():
            with open(root / filename, "w") as fh:
                fh.write(tpl.render(data))
    else:
        print("No template for %s! Can not generate anything!" % tpl)

    print("Done! you can find (and further modify) your behaviour in %s" % root)
